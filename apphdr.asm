; This file was generated by an old version of z88dk
;
; It was then manually edited to add in more options


        MODULE  apphdr

        SECTION code

        defc    reqpag = 64

; Here we go, with lots of assembler!
        INCLUDE "dor.def"

        XREF    app_entrypoint  ; The real starting point for our apps
        XDEF    applname        ; So startup can pick it up
        XDEF    in_dor
        XDEF    in_dor_seg_setup
; How much bad memory do we actually need
; If reqpag is defined already do nothing, else default to $20 pages
        IF ( reqpag = 0 ) | reqpag
        ELSE
                defc    reqpag = $20
        ENDIF
;Safe workspace needed by app (user specifies so can have app using
;static vars that is still good...) be careful though!
        IF !safedata
                defc    safedata = 0
        ENDIF
.dummy_entry
        jp      app_entrypoint
IF ( (reqpag=0) | (reqpag >= 32) )
        scf            ; no bad or >8k bad needed
        ret
ELSE
        ld      bc,8192+(reqpag*256)
        ld      de,8192+8192
        or      a
        ret
ENDIF
; Initally let us consider only single bank applications
        defc    in_bank = 63
; Application DOR
.in_dor defb    0,0,0   ; links to parent, brother, son
        defw    0       ;brother_add
        defb    0       ;brother_bank
        defb    0,0,0
        defb    $83     ; DOR type - application
        defb    indorend-indorstart
.indorstart     
        defb    '@'     ; key to info section
        defb    ininfend-ininfstart
.ininfstart     
        defw    0
        defb     'L'   
IF reqpag = 0
        defb    0
ELSE 
        IF reqpag <=32
                defb    32
        ELSE
                defb    reqpag  ; contigious RAM
        ENDIF
ENDIF
        defw    0       ; overhead
        defw    0       ; unsafe workspace
        defw    50+safedata ; safe workspace (used for startup vars)
                            ; and user specifed safe data
        defw    dummy_entry   ; entry point
; These are set up by appmake, but we can define top for certain
.in_dor_seg_setup
        defb    0       ; segment bindings
        defb    0
        defb    in_bank-1 
        defb    in_bank
        defb     2          ; at_bad etc
        defb     1         ;caps lock
.ininfend       defb    'H'     ; key to help section
        defb    inhlpend-inhlpstart
.inhlpstart     defw    in_topics
        defb    in_bank
        defw    in_commands
        defb    in_bank
        defw    in_help
        defb    in_bank
        defb    0,0,0   ; no tokens
.inhlpend       defb    'N'     ; key to name section
        defb    innamend-innamstart
.innamstart     
        defm     "Lemmings\x00"
.innamend       defb    $ff
.indorend
; topics, shoved in header file to make this one more readable!
.in_topics      defb    0
.in_topic1
                defb in_topic1end - in_topic1
                defm     "Options"   
                defb    0,0             ;ptr to help - use \0 of "Options" 
                defb    0
                defb in_topic1end - in_topic1
.in_topic1end
.in_topic2
                defb in_topic2end - in_topic2
                defm     "Commands"   
                defb    0,0             ;ptr to help - use \0 of "Commands" 
                defb    0
                defb in_topic2end - in_topic2
.in_topic2end
; end marker for end of topics
.incom_topend
        defb    0
.in_commands    defb    0
.in_com_1_1
        defb    in_com_1_1end - in_com_1_1
        defb     $81   
        defm     "OD\x00" 
        defm     "Display"   
        defb    0,0               ;pointer to help - use \0
        defb    0
        defb    in_com_1_1end - in_com_1_1
.in_com_1_1end
.in_com_1_2
        defb    in_com_1_2end - in_com_1_2
        defb     $82   
        defm     "OI\x00"
        defm     "Invert"   
        defb    0,0               ;pointer to help - use \0
        defb    0
        defb    in_com_1_2end - in_com_1_2
.in_com_1_2end
.in_com_1_3
        defb    in_com_1_3end - in_com_1_3
        defb     $83   
        defm     "OT\x00"
        defm     "Title Music\x00"
        defb    0               ;pointer to help - use \0
        defb    0
        defb    in_com_1_3end - in_com_1_3
.in_com_1_3end
.in_com_1_4
        defb    in_com_1_4end - in_com_1_4
        defb     $84   
        defm     "OS\x00"
        defm     "Samples\x00"
        defb    0               ;pointer to help - use \0
        defb    0
        defb    in_com_1_4end - in_com_1_4
.in_com_1_4end
        defb    1               ;end marker of current topic
IF REDEFINE
.in_com_2_1
        defb    in_com_2_1end - in_com_2_1
        defb     $85   
        defm     "CR\x00"
        defm     "Redefine Keys"   
        defb    0,0               ;pointer to help - use \0
        defb    0
        defb    in_com_2_1end - in_com_2_1
.in_com_2_1end
ENDIF
.in_com_2_2
        defb    in_com_2_2end - in_com_2_2
        defb     $80
        defm     "CQ\x00"
        defm     "Quit Game"   
        defb    0,0               ;pointer to help - use \0
        defb    0
        defb    in_com_2_2end - in_com_2_2
.in_com_2_2end
.in_coms_end    defb    0       ;end marker
; Help entries
.in_help        defb    $7f
        defm     "A conversion of the seminal computer game\x7f"
        defm     "Originally published by Psygnosis 1991\x7f" 
        defm     "Converted/remixed by Dominic Morris\x7f" 
        defm     "http://github.com/suborb/lemmings_z88\x7f"
        defm     "Compression code by Garry Lancaster\x7f"
        defm     "v1.01 - 6.8.2021\x7f" 
        defb    0
.applname
        defm     "Not playing\x00"
